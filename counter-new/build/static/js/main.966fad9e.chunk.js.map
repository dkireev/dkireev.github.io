{"version":3,"sources":["ui/Icon.tsx","ui/AddGoal.tsx","App.js","serviceWorker.js","index.js"],"names":["Icon","_this$props","this","props","source","size","react_default","a","createElement","src","width","alt","React","PureComponent","AddGoalContainer","styled","_templateObject","AddGoal","Icon_Icon","AppContainer","App_templateObject","Header","_templateObject2","Section","_templateObject3","App","AddGoal_AddGoal","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sPAOqBA,mLACR,IAAAC,EACoBC,KAAKC,MAAtBC,EADHH,EACGG,OAAQC,EADXJ,EACWI,KAChB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAK,UAAYL,EAAS,OAAQM,MAAOL,EAAMM,IAAI,YAJlCC,IAAMC,uTCHxC,IAAMC,EAAmBC,YAAO,MAAPA,CAAHC,KAaTC,EAAU,WACf,OACIX,EAAAC,EAAAC,cAACM,EAAD,KACIR,EAAAC,EAAAC,cAACU,EAAD,CAAMd,OAAQ,OAAQC,KAAM,0iBChB5C,IAAMc,EAAeJ,YAAO,MAAPA,CAAHK,KAKZC,EAASN,YAAO,MAAPA,CAAHO,KASNC,EAAUR,YAAO,MAAPA,CAAHS,KAQQC,mLAEjB,OACEnB,EAAAC,EAAAC,cAACW,EAAD,KACEb,EAAAC,EAAAC,cAACa,EAAD,KACEf,EAAAC,EAAAC,cAAA,+BAEFF,EAAAC,EAAAC,cAACe,EAAD,KACEjB,EAAAC,EAAAC,cAAA,6CAEFF,EAAAC,EAAAC,cAACkB,EAAD,cAVyBd,IAAMC,eCdjCc,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,gHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,GAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,OAAQ,WAC9B,IAAM5B,EAAK,GAAA6B,OAAMJ,GAAN,sBAEPhC,GAgEV,SAAiCO,EAAOC,GAEtC6B,MAAM9B,GACHK,KAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ClC,UAAUC,cAAckC,MAAMhC,KAAK,SAAAC,GACjCA,EAAagC,aAAajC,KAAK,WAC7BV,OAAOC,SAAS2C,aAKpBxC,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFA0B,CAAwBxC,EAAOC,GAI/BC,UAAUC,cAAckC,MAAMhC,KAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,MC1C/BE","file":"static/js/main.966fad9e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface IProps {\r\n    source: string;\r\n    size: number;\r\n}\r\n\r\nexport default class Icon extends React.PureComponent<IProps> {\r\n    render() {\r\n        const { source, size } = this.props;\r\n        return (\r\n            <img src={'/icons/' + source + '.svg'} width={size} alt=\"\" />\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Icon from './Icon';\r\n\r\nconst AddGoalContainer = styled('div')`\r\n    width: 48px;\r\n    height: 48px;\r\n    background-color: green;\r\n    position: fixed;\r\n    right: 16px;\r\n    bottom: 32px;\r\n    border-radius: 50%;\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n`;\r\n\r\nexport const AddGoal = () => {\r\n        return (\r\n            <AddGoalContainer>\r\n                <Icon source={'plus'} size={32} />\r\n            </AddGoalContainer>\r\n        )\r\n}\r\n","import React from 'react';\nimport styled from 'styled-components';\nimport { AddGoal } from './ui/AddGoal';\n\nconst AppContainer = styled('div')`\n  height: 100vh;\n  display: grid;\n  grid-auto-flow: row;\n`;\nconst Header = styled('div')`\n  background-color: #282c34;\n  height: 48px;\n  padding: 0 16px;\n  color: #fff;\n  display: grid;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst Section = styled('div')`\n  height: calc(100vh - 48px);\n  padding: 16px;\n  display: grid;\n  align-items: center;\n  text-align: center;\n`;\n\nexport default class App extends React.PureComponent {\n  render() {\n    return (\n      <AppContainer>\n        <Header>\n          <span>Personal goals</span>\n        </Header>\n        <Section>\n          <span>You have no any goals yet...</span>\n        </Section>\n        <AddGoal />\n      </AppContainer>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}