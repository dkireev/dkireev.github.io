{"version":3,"sources":["data/useExchange.js","data/AssetsVolume.js","data/data.js","App.js","serviceWorker.js","index.js"],"names":["useExchange","useState","rates","setRates","useEffect","fetch","then","res","json","AssetsVolume","asset","reduce","acc","item","currency","amount","goal","crypto","securities","deposits","start","interest","React","memo","total","totalUAH","UAH","className","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0PAgBeA,EAdK,WAAO,IAAD,EACEC,mBAAS,IADX,mBACjBC,EADiB,KACVC,EADU,KAWxB,OATAC,qBAAU,WACRC,MAAM,iDAIHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAASA,EAAIL,SAClBI,KAAKH,KACP,IACID,GCFMO,EATM,SAACC,GACpB,IAAMR,EAAQF,IAKd,OAJsBU,EAAMC,QAAO,SAACC,EAAKC,GACvC,OAAOD,EAAO,EAAIV,EAAMW,EAAKC,UAAaD,EAAKE,SAC9C,ICNQC,EAEH,IAGGC,EAAS,CACpB,CACEH,SAAU,MACVC,OAAQ,YAICG,EAAa,CACxB,CACEJ,SAAU,MACVC,OAAQ,QAEV,CACED,SAAU,MACVC,OAAQ,SAICI,EAAW,CACtB,CACEC,MAAO,cACPN,SAAU,MACVC,OAAQ,SACRM,SAAU,MAEZ,CACED,MAAO,eACPN,SAAU,MACVC,OAAQ,SACRM,SAAU,IAEZ,CACED,MAAO,eACPN,SAAU,MACVC,OAAQ,SACRM,SAAU,IAEZ,CACED,MAAO,cACPN,SAAU,MACVC,OAAQ,SACRM,SAAU,IAEZ,CACED,MAAO,eACPN,SAAU,MACVC,OAAQ,SACRM,SAAU,QC5BCC,MAAMC,MAlBT,WACV,IAAMrB,EAAQF,IACRwB,EACJf,EAAaQ,GAAUR,EAAaS,GAAcT,EAAaU,GAC3DM,EAAWD,EAAQtB,EAAMwB,IAC/B,OACE,yBAAKC,UAAU,OAAf,UACUH,EAAMI,QAAQ,GADxB,OAEE,6BACA,6BAHF,UAIUH,EAASG,QAAQ,GAJ3B,OAKE,6BACA,6BANF,qBAO8B,IAARJ,EAAeR,GAAaY,QAAQ,GAP1D,QCAgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAACmC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f4916a59.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useExchange = () => {\n  const [rates, setRates] = useState({});\n  useEffect(() => {\n    fetch(\"https://dkireev.github.io/counter/latest.json\")\n      // fetch(\n      //   \"https://openexchangerates.org/api/latest.json?app_id=37ce05177037491283b06fe29e31e8f3&symbols=EUR,BTC,UAH\"\n      // )\n      .then((res) => res.json())\n      .then((res) => res.rates)\n      .then(setRates);\n  }, []);\n  return rates;\n};\n\nexport default useExchange;\n","import useExchange from \"./useExchange\";\n\nconst AssetsVolume = (asset) => {\n  const rates = useExchange();\n  const assetsReducer = asset.reduce((acc, item) => {\n    return acc + (1 / rates[item.currency]) * item.amount;\n  }, 0);\n  const assetsAmount = assetsReducer;\n  return assetsAmount;\n};\n\nexport default AssetsVolume;\n","export const goal = {\n  currency: \"USD\",\n  amount: 1000000\n};\n\nexport const crypto = [\n  {\n    currency: \"BTC\",\n    amount: 0.02127568\n  }\n];\n\nexport const securities = [\n  {\n    currency: \"EUR\",\n    amount: 350.78\n  },\n  {\n    currency: \"EUR\",\n    amount: 133.83\n  }\n];\n\nexport const deposits = [\n  {\n    start: \"Mar 4, 2020\",\n    currency: \"UAH\",\n    amount: 92155.16,\n    interest: 14.2\n  },\n  {\n    start: \"Mar 10, 2020\",\n    currency: \"UAH\",\n    amount: 174817.6,\n    interest: 17\n  },\n  {\n    start: \"Mar 11, 2020\",\n    currency: \"UAH\",\n    amount: 32263.59,\n    interest: 17\n  },\n  {\n    start: \"Mar 3, 2020\",\n    currency: \"UAH\",\n    amount: 30242.82,\n    interest: 16\n  },\n  {\n    start: \"Feb 21, 2020\",\n    currency: \"UAH\",\n    amount: 10120.85,\n    interest: 13.75\n  }\n];\n","import React from \"react\";\nimport \"./App.css\";\nimport useExchange from \"./data/useExchange\";\nimport AssetsVolume from \"./data/AssetsVolume\";\nimport { goal, securities, deposits, crypto } from \"./data/data\";\n\nconst App = () => {\n  const rates = useExchange();\n  const total =\n    AssetsVolume(crypto) + AssetsVolume(securities) + AssetsVolume(deposits);\n  const totalUAH = total * rates.UAH;\n  return (\n    <div className=\"App\">\n      Total: {total.toFixed(2)} USD\n      <br />\n      <br />\n      Total: {totalUAH.toFixed(2)} UAH\n      <br />\n      <br />\n      Goal completion: {((total * 100) / goal.amount).toFixed(2)}%\n    </div>\n  );\n};\n\nexport default React.memo(App);\n\n// Object.keys(a).map(key => `Key ${key} - value ${a[key]}`)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}