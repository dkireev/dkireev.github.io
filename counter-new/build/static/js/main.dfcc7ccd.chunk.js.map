{"version":3,"sources":["data/assetsVolume.js","data/data.js","data/useExchange.js","data/depositsInterest.js","App.js","serviceWorker.js","index.js"],"names":["assetsVolume","asset","rates","reduce","acc","item","currency","amount","assets","crypto","securities","deposits","start","interest","tax","useExchange","useState","setRates","useEffect","fetch","then","res","json","depositsInterest","map","secondsAccumalated","Date","getTime","React","memo","total","Object","keys","totalUAH","UAH","className","isNaN","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sOAMeA,G,WANM,SAACC,EAAOC,GAC3B,OAAOD,EAAME,QAAO,SAACC,EAAKC,GACxB,OAAOD,EAAO,EAAIF,EAAMG,EAAKC,UAAaD,EAAKE,SAC9C,KCEQC,EAAS,CACpBC,OAAQ,CACN,CACEH,SAAU,MACVC,OAAQ,YAGZG,WAAY,CACV,CACEJ,SAAU,MACVC,OAAQ,QAEV,CACED,SAAU,MACVC,OAAQ,SAGZI,SAAU,CACR,CACEC,MAAO,cACPN,SAAU,MACVC,OAAQ,SACRM,SAAU,KACVC,IAAK,MAEP,CACEF,MAAO,eACPN,SAAU,MACVC,OAAQ,SACRM,SAAU,GACVC,IAAK,MAEP,CACEF,MAAO,eACPN,SAAU,MACVC,OAAQ,SACRM,SAAU,GACVC,IAAK,MAEP,CACEF,MAAO,cACPN,SAAU,MACVC,OAAQ,SACRM,SAAU,GACVC,IAAK,MAEP,CACEF,MAAO,eACPN,SAAU,MACVC,OAAQ,SACRM,SAAU,MACVC,IAAK,Q,OCtCIC,EAhBK,WAAO,IAAD,EACEC,mBAAS,IADX,mBACjBd,EADiB,KACVe,EADU,KAaxB,OAXAC,qBAAU,WACRC,MACE,6GAKCC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAASA,EAAInB,SAClBkB,KAAKH,KACP,IACIf,GCCMqB,EAdU,WACvB,OAAOf,EAAOG,SACXa,KAAI,SAACnB,GACJ,IAEIoB,IAFY,IAAIC,MAAOC,UAChB,IAAID,KAAKrB,EAAKO,OAAOe,WACc,IAE9C,OADuBtB,EAAKQ,SAAW,SACZY,EAAqBpB,EAAKE,OAAU,OAEhEJ,QAAO,SAACC,EAAKC,GACZ,OAAOD,EAAMC,IACZ,ICcQuB,MAAMC,MApBT,WACV,IAAM3B,EAAQa,IACRe,EAAQC,OAAOC,KAAKxB,GACvBgB,KAAI,SAACnB,GAAD,OAAUL,EAAaQ,EAAOH,GAAOH,MACzCC,QAAO,SAACC,EAAKC,GACZ,OAAOD,EAAMC,IACZ,GACC4B,EAAWH,EAAQ5B,EAAMgC,IACzBrB,EAAWU,IAEjB,OACE,yBAAKY,UAAU,OACZC,MAAMN,GAAS,aAAf,UAAiCG,EAASI,QAAQ,GAAlD,QACD,6BACA,6BACCxB,EAASwB,QAAQ,GAJpB,WCNgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAC8B,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dfcc7ccd.chunk.js","sourcesContent":["const assetsVolume = (asset, rates) => {\n  return asset.reduce((acc, item) => {\n    return acc + (1 / rates[item.currency]) * item.amount;\n  }, 0);\n};\n\nexport default assetsVolume;\n","export const goal = {\n  currency: \"USD\",\n  amount: 1000000\n};\n\nexport const assets = {\n  crypto: [\n    {\n      currency: \"BTC\",\n      amount: 0.02127568\n    }\n  ],\n  securities: [\n    {\n      currency: \"EUR\",\n      amount: 324.95\n    },\n    {\n      currency: \"EUR\",\n      amount: 124.12\n    }\n  ],\n  deposits: [\n    {\n      start: \"Mar 4, 2020\",\n      currency: \"UAH\",\n      amount: 92155.16,\n      interest: 14.2,\n      tax: 19.5\n    },\n    {\n      start: \"Mar 10, 2020\",\n      currency: \"UAH\",\n      amount: 174817.6,\n      interest: 17,\n      tax: 19.5\n    },\n    {\n      start: \"Mar 11, 2020\",\n      currency: \"UAH\",\n      amount: 32263.59,\n      interest: 17,\n      tax: 19.5\n    },\n    {\n      start: \"Mar 3, 2020\",\n      currency: \"UAH\",\n      amount: 30242.82,\n      interest: 16,\n      tax: 19.5\n    },\n    {\n      start: \"Feb 21, 2020\",\n      currency: \"UAH\",\n      amount: 10120.85,\n      interest: 13.75,\n      tax: 19.5\n    }\n  ]\n};\n","import { useState, useEffect } from \"react\";\n\nconst useExchange = () => {\n  const [rates, setRates] = useState({});\n  useEffect(() => {\n    fetch(\n      \"https://openexchangerates.org/api/latest.json?app_id=37ce05177037491283b06fe29e31e8f3&symbols=EUR,BTC,UAH\"\n    )\n      // fetch(\n      //   \"https://dkireev.github.io/counter/latest.json\"\n      // )\n      .then((res) => res.json())\n      .then((res) => res.rates)\n      .then(setRates);\n  }, []);\n  return rates;\n};\n\nexport default useExchange;\n","import { assets } from \"./data\";\n\nconst depositsInterest = () => {\n  return assets.deposits\n    .map((item) => {\n      let timestamp = new Date().getTime();\n      let time = new Date(item.start).getTime();\n      let secondsAccumalated = (timestamp - time) / 1000;\n      let interestInSecond = item.interest / 31557600; //Stands from 365.25 / 24 / 60 / 60;\n      return (interestInSecond * secondsAccumalated * item.amount) / 100;\n    })\n    .reduce((acc, item) => {\n      return acc + item;\n    }, 0);\n};\n\nexport default depositsInterest;\n","import React from \"react\";\nimport \"./App.css\";\nimport assetsVolume from \"./data/assetsVolume\";\nimport { assets } from \"./data/data\";\nimport useExchange from \"./data/useExchange\";\nimport depositsInterest from \"./data/depositsInterest\";\n\nconst App = () => {\n  const rates = useExchange();\n  const total = Object.keys(assets)\n    .map((item) => assetsVolume(assets[item], rates))\n    .reduce((acc, item) => {\n      return acc + item;\n    }, 0);\n  const totalUAH = total * rates.UAH;\n  const interest = depositsInterest();\n\n  return (\n    <div className=\"App\">\n      {isNaN(total) ? \"Loading...\" : `${totalUAH.toFixed(2)} UAH`}\n      <br />\n      <br />\n      {interest.toFixed(2)} UAH\n    </div>\n  );\n};\n\nexport default React.memo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}