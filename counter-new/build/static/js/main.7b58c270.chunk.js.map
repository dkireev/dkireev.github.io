{"version":3,"sources":["data/assetsVolume.js","data/data.js","data/useExchange.js","data/depositsInterest.js","App.js","serviceWorker.js","index.js"],"names":["assetsVolume","asset","rates","reduce","acc","item","currency","amount","assets","crypto","securities","deposits","start","interest","tax","useExchange","useState","setRates","useEffect","fetch","then","res","json","depositsInterest","map","secondsAccumalated","Date","getTime","React","memo","total","Object","keys","totalUAH","UAH","className","isNaN","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sOAMeA,G,WANM,SAACC,EAAOC,GAC3B,OAAOD,EAAME,QAAO,SAACC,EAAKC,GACxB,OAAOD,EAAO,EAAIF,EAAMG,EAAKC,UAAaD,EAAKE,SAC9C,KCEQC,EAAS,CACpBC,OAAQ,CACN,CACEH,SAAU,MACVC,OAAQ,YAGZG,WAAY,CACV,CACEJ,SAAU,MACVC,OAAQ,QAEV,CACED,SAAU,MACVC,OAAQ,SAGZI,SAAU,CACR,CACEC,MAAO,cACPN,SAAU,MACVC,OAAQ,SACRM,SAAU,KACVC,IAAK,MAEP,CACEF,MAAO,eACPN,SAAU,MACVC,OAAQ,SACRM,SAAU,GACVC,IAAK,MAEP,CACEF,MAAO,eACPN,SAAU,MACVC,OAAQ,SACRM,SAAU,GACVC,IAAK,MAEP,CACEF,MAAO,cACPN,SAAU,MACVC,OAAQ,SACRM,SAAU,GACVC,IAAK,MAEP,CACEF,MAAO,eACPN,SAAU,MACVC,OAAQ,SACRM,SAAU,MACVC,IAAK,Q,OCtCIC,EAhBK,WAAO,IAAD,EACEC,mBAAS,IADX,mBACjBd,EADiB,KACVe,EADU,KAaxB,OAXAC,qBAAU,WACRC,MACE,6GAKCC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAASA,EAAInB,SAClBkB,KAAKH,KACP,IACIf,GCCMqB,EAdU,WACvB,OAAOf,EAAOG,SACXa,KAAI,SAACnB,GACJ,IAEIoB,IAFY,IAAIC,MAAOC,UAChB,IAAID,KAAKrB,EAAKO,OAAOe,WACc,IAE9C,OADuBtB,EAAKQ,SAAW,SACZY,EAAqBpB,EAAKE,OAAU,OAEhEJ,QAAO,SAACC,EAAKC,GACZ,OAAOD,EAAMC,IACZ,ICcQuB,MAAMC,MApBT,WACV,IAAM3B,EAAQa,IACRe,EAAQC,OAAOC,KAAKxB,GACvBgB,KAAI,SAACnB,GAAD,OAAUL,EAAaQ,EAAOH,GAAOH,MACzCC,QAAO,SAACC,EAAKC,GACZ,OAAOD,EAAMC,IACZ,GACC4B,EAAWH,EAAQ5B,EAAMgC,IACzBrB,EAAWU,IAEjB,OACE,yBAAKY,UAAU,OACZC,MAAMN,GAAS,aAAf,UAAiCG,EAASI,QAAQ,GAAlD,QACD,6BACA,6BACCxB,EAASwB,QAAQ,GAJpB,WCNgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAC8B,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7b58c270.chunk.js","sourcesContent":["const assetsVolume = (asset, rates) => {\r\n  return asset.reduce((acc, item) => {\r\n    return acc + (1 / rates[item.currency]) * item.amount;\r\n  }, 0);\r\n};\r\n\r\nexport default assetsVolume;\r\n","export const goal = {\r\n  currency: \"USD\",\r\n  amount: 1000000\r\n};\r\n\r\nexport const assets = {\r\n  crypto: [\r\n    {\r\n      currency: \"BTC\",\r\n      amount: 0.02168609\r\n    }\r\n  ],\r\n  securities: [\r\n    {\r\n      currency: \"EUR\",\r\n      amount: 306.95\r\n    },\r\n    {\r\n      currency: \"EUR\",\r\n      amount: 119.88\r\n    }\r\n  ],\r\n  deposits: [\r\n    {\r\n      start: \"Mar 4, 2020\",\r\n      currency: \"UAH\",\r\n      amount: 92155.16,\r\n      interest: 14.2,\r\n      tax: 19.5\r\n    },\r\n    {\r\n      start: \"Mar 10, 2020\",\r\n      currency: \"UAH\",\r\n      amount: 174817.6,\r\n      interest: 17,\r\n      tax: 19.5\r\n    },\r\n    {\r\n      start: \"Mar 11, 2020\",\r\n      currency: \"UAH\",\r\n      amount: 32263.59,\r\n      interest: 17,\r\n      tax: 19.5\r\n    },\r\n    {\r\n      start: \"Mar 3, 2020\",\r\n      currency: \"UAH\",\r\n      amount: 30242.82,\r\n      interest: 16,\r\n      tax: 19.5\r\n    },\r\n    {\r\n      start: \"Feb 21, 2020\",\r\n      currency: \"UAH\",\r\n      amount: 10120.85,\r\n      interest: 13.75,\r\n      tax: 19.5\r\n    }\r\n  ]\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useExchange = () => {\r\n  const [rates, setRates] = useState({});\r\n  useEffect(() => {\r\n    fetch(\r\n      \"https://openexchangerates.org/api/latest.json?app_id=37ce05177037491283b06fe29e31e8f3&symbols=EUR,BTC,UAH\"\r\n    )\r\n      // fetch(\r\n      //   \"https://dkireev.github.io/counter/latest.json\"\r\n      // )\r\n      .then((res) => res.json())\r\n      .then((res) => res.rates)\r\n      .then(setRates);\r\n  }, []);\r\n  return rates;\r\n};\r\n\r\nexport default useExchange;\r\n","import { assets } from \"./data\";\r\n\r\nconst depositsInterest = () => {\r\n  return assets.deposits\r\n    .map((item) => {\r\n      let timestamp = new Date().getTime();\r\n      let time = new Date(item.start).getTime();\r\n      let secondsAccumalated = (timestamp - time) / 1000;\r\n      let interestInSecond = item.interest / 31557600; //Stands from 365.25 / 24 / 60 / 60;\r\n      return (interestInSecond * secondsAccumalated * item.amount) / 100;\r\n    })\r\n    .reduce((acc, item) => {\r\n      return acc + item;\r\n    }, 0);\r\n};\r\n\r\nexport default depositsInterest;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport assetsVolume from \"./data/assetsVolume\";\r\nimport { assets } from \"./data/data\";\r\nimport useExchange from \"./data/useExchange\";\r\nimport depositsInterest from \"./data/depositsInterest\";\r\n\r\nconst App = () => {\r\n  const rates = useExchange();\r\n  const total = Object.keys(assets)\r\n    .map((item) => assetsVolume(assets[item], rates))\r\n    .reduce((acc, item) => {\r\n      return acc + item;\r\n    }, 0);\r\n  const totalUAH = total * rates.UAH;\r\n  const interest = depositsInterest();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {isNaN(total) ? \"Loading...\" : `${totalUAH.toFixed(2)} UAH`}\r\n      <br />\r\n      <br />\r\n      {interest.toFixed(2)} UAH\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" }\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}