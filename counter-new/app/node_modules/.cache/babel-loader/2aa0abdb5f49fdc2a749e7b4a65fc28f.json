{"ast":null,"code":"import React from \"react\";\nimport { assets } from \"./data\";\nimport useExchange from \"./useExchange\";\n\nconst DepositsInterest = () => {\n  const rates = useExchange();\n  const timestamp = new Date().getTime();\n  console.log(rates);\n  return assets.deposits.map(item => {\n    let time = new Date(item.start).getTime();\n    let secondsAccumalated = (timestamp - time) / 1000;\n    let interestInSecond = item.interest / 31557600; //Stands from 365.25 / 24 / 60 / 60;\n\n    return interestInSecond * secondsAccumalated * item.amount / 100;\n  }).reduce((acc, item) => {\n    return acc + item;\n  });\n};\n\nexport default React.memo(DepositsInterest);","map":{"version":3,"sources":["/Users/dkireiev/Documents/dkireev.github.io/counter-new/src/data/DepositsInterest.js"],"names":["React","assets","useExchange","DepositsInterest","rates","timestamp","Date","getTime","console","log","deposits","map","item","time","start","secondsAccumalated","interestInSecond","interest","amount","reduce","acc","memo"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAMC,KAAK,GAAGF,WAAW,EAAzB;AACA,QAAMG,SAAS,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AAEA,SAAOH,MAAM,CAACS,QAAP,CACJC,GADI,CACCC,IAAD,IAAU;AACb,QAAIC,IAAI,GAAG,IAAIP,IAAJ,CAASM,IAAI,CAACE,KAAd,EAAqBP,OAArB,EAAX;AACA,QAAIQ,kBAAkB,GAAG,CAACV,SAAS,GAAGQ,IAAb,IAAqB,IAA9C;AACA,QAAIG,gBAAgB,GAAGJ,IAAI,CAACK,QAAL,GAAgB,QAAvC,CAHa,CAGoC;;AACjD,WAAQD,gBAAgB,GAAGD,kBAAnB,GAAwCH,IAAI,CAACM,MAA9C,GAAwD,GAA/D;AACD,GANI,EAOJC,MAPI,CAOG,CAACC,GAAD,EAAMR,IAAN,KAAe;AACrB,WAAOQ,GAAG,GAAGR,IAAb;AACD,GATI,CAAP;AAUD,CAfD;;AAiBA,eAAeZ,KAAK,CAACqB,IAAN,CAAWlB,gBAAX,CAAf","sourcesContent":["import React from \"react\";\nimport { assets } from \"./data\";\nimport useExchange from \"./useExchange\";\n\nconst DepositsInterest = () => {\n  const rates = useExchange();\n  const timestamp = new Date().getTime();\n  console.log(rates);\n\n  return assets.deposits\n    .map((item) => {\n      let time = new Date(item.start).getTime();\n      let secondsAccumalated = (timestamp - time) / 1000;\n      let interestInSecond = item.interest / 31557600; //Stands from 365.25 / 24 / 60 / 60;\n      return (interestInSecond * secondsAccumalated * item.amount) / 100;\n    })\n    .reduce((acc, item) => {\n      return acc + item;\n    });\n};\n\nexport default React.memo(DepositsInterest);\n"]},"metadata":{},"sourceType":"module"}