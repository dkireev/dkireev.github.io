{"ast":null,"code":"import { assets } from \"./data\";\nimport useExchange from \"./useExchange\";\n\nconst DepositsInterest = () => {\n  const rates = useExchange();\n  const timestamp = new Date().getTime();\n  setInterval(() => {\n    const accumulated = assets.deposits.map(item => {\n      let time = new Date(item.start).getTime();\n      let secondsAccumalated = (timestamp - time) / 1000;\n      let interestInSecond = item.interest / 31557600; //Stands from 365.25 / 24 / 60 / 60;\n\n      return interestInSecond * secondsAccumalated * item.amount / 100;\n    });\n    return accumulated.reduce((acc, item) => {\n      return acc + item;\n    });\n  }, 1000);\n};\n\nexport default DepositsInterest;","map":{"version":3,"sources":["/Users/dkireiev/Documents/dkireev.github.io/counter-new/src/data/DepositsInterest.js"],"names":["assets","useExchange","DepositsInterest","rates","timestamp","Date","getTime","setInterval","accumulated","deposits","map","item","time","start","secondsAccumalated","interestInSecond","interest","amount","reduce","acc"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAMC,KAAK,GAAGF,WAAW,EAAzB;AACA,QAAMG,SAAS,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;AACAC,EAAAA,WAAW,CAAC,MAAM;AAChB,UAAMC,WAAW,GAAGR,MAAM,CAACS,QAAP,CAAgBC,GAAhB,CAAqBC,IAAD,IAAU;AAChD,UAAIC,IAAI,GAAG,IAAIP,IAAJ,CAASM,IAAI,CAACE,KAAd,EAAqBP,OAArB,EAAX;AACA,UAAIQ,kBAAkB,GAAG,CAACV,SAAS,GAAGQ,IAAb,IAAqB,IAA9C;AACA,UAAIG,gBAAgB,GAAGJ,IAAI,CAACK,QAAL,GAAgB,QAAvC,CAHgD,CAGC;;AACjD,aAAQD,gBAAgB,GAAGD,kBAAnB,GAAwCH,IAAI,CAACM,MAA9C,GAAwD,GAA/D;AACD,KALmB,CAApB;AAMA,WAAOT,WAAW,CAACU,MAAZ,CAAmB,CAACC,GAAD,EAAMR,IAAN,KAAe;AACvC,aAAOQ,GAAG,GAAGR,IAAb;AACD,KAFM,CAAP;AAGD,GAVU,EAUR,IAVQ,CAAX;AAWD,CAdD;;AAgBA,eAAeT,gBAAf","sourcesContent":["import { assets } from \"./data\";\nimport useExchange from \"./useExchange\";\n\nconst DepositsInterest = () => {\n  const rates = useExchange();\n  const timestamp = new Date().getTime();\n  setInterval(() => {\n    const accumulated = assets.deposits.map((item) => {\n      let time = new Date(item.start).getTime();\n      let secondsAccumalated = (timestamp - time) / 1000;\n      let interestInSecond = item.interest / 31557600; //Stands from 365.25 / 24 / 60 / 60;\n      return (interestInSecond * secondsAccumalated * item.amount) / 100;\n    });\n    return accumulated.reduce((acc, item) => {\n      return acc + item;\n    });\n  }, 1000);\n};\n\nexport default DepositsInterest;\n"]},"metadata":{},"sourceType":"module"}