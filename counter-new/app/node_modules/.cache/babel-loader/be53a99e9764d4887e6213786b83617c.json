{"ast":null,"code":"import { assets } from \"./data\";\nimport useExchange from \"./useExchange\";\n\nconst DepositsInterest = () => setInterval(() => {\n  const rates = useExchange();\n  const timestamp = new Date().getTime();\n  const accumulated = assets.deposits.map(item => {\n    let time = new Date(item.start).getTime();\n    let secondsAccumalated = (timestamp - time) / 1000;\n    let interestInSecond = item.interest / 31557600; //Stands from 365.25 / 24 / 60 / 60;\n\n    return interestInSecond * secondsAccumalated * item.amount / 100;\n  });\n  return accumulated.reduce((acc, item) => {\n    return acc + item;\n  });\n});\n\nexport default DepositsInterest;","map":{"version":3,"sources":["/Users/dkireiev/Documents/dkireev.github.io/counter-new/src/data/DepositsInterest.js"],"names":["assets","useExchange","DepositsInterest","setInterval","rates","timestamp","Date","getTime","accumulated","deposits","map","item","time","start","secondsAccumalated","interestInSecond","interest","amount","reduce","acc"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,gBAAgB,GAAG,MACvBC,WAAW,CAAC,MAAM;AAChB,QAAMC,KAAK,GAAGH,WAAW,EAAzB;AACA,QAAMI,SAAS,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;AACA,QAAMC,WAAW,GAAGR,MAAM,CAACS,QAAP,CAAgBC,GAAhB,CAAqBC,IAAD,IAAU;AAChD,QAAIC,IAAI,GAAG,IAAIN,IAAJ,CAASK,IAAI,CAACE,KAAd,EAAqBN,OAArB,EAAX;AACA,QAAIO,kBAAkB,GAAG,CAACT,SAAS,GAAGO,IAAb,IAAqB,IAA9C;AACA,QAAIG,gBAAgB,GAAGJ,IAAI,CAACK,QAAL,GAAgB,QAAvC,CAHgD,CAGC;;AACjD,WAAQD,gBAAgB,GAAGD,kBAAnB,GAAwCH,IAAI,CAACM,MAA9C,GAAwD,GAA/D;AACD,GALmB,CAApB;AAMA,SAAOT,WAAW,CAACU,MAAZ,CAAmB,CAACC,GAAD,EAAMR,IAAN,KAAe;AACvC,WAAOQ,GAAG,GAAGR,IAAb;AACD,GAFM,CAAP;AAGD,CAZU,CADb;;AAeA,eAAeT,gBAAf","sourcesContent":["import { assets } from \"./data\";\nimport useExchange from \"./useExchange\";\n\nconst DepositsInterest = () =>\n  setInterval(() => {\n    const rates = useExchange();\n    const timestamp = new Date().getTime();\n    const accumulated = assets.deposits.map((item) => {\n      let time = new Date(item.start).getTime();\n      let secondsAccumalated = (timestamp - time) / 1000;\n      let interestInSecond = item.interest / 31557600; //Stands from 365.25 / 24 / 60 / 60;\n      return (interestInSecond * secondsAccumalated * item.amount) / 100;\n    });\n    return accumulated.reduce((acc, item) => {\n      return acc + item;\n    });\n  });\n\nexport default DepositsInterest;\n"]},"metadata":{},"sourceType":"module"}